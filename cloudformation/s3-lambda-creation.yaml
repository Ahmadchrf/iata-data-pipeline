AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation for IATA data pipeline case study - Lambda x s3
Resources:
  # The second lambda is triggered once a new csv file is added in iata-pipeline-data/raw/original
  IataDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
          Status: Enabled
      BucketName: 'iata-pipeline-data'
      NotificationConfiguration:
        LambdaConfigurations:
        - Event: s3:ObjectCreated:*
          Filter:
            S3Key:
              Rules:fetch_handler_lambda
              - Name: prefix
                Value: raw/original/
              - Name: suffix
                Value: .csv
          Function: !GetAtt process_handler_lambda.Arn

        - Event: s3:ObjectCreated:*
          Filter:
            S3Key:
              Rules:
              - Name: prefix
                Value: processed/
              - Name: suffix
                Value: .parquet
          Function: !ImportValue metadatahandlerARN

  LambdaFunctions:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: 'iata-pipeline-lambda-code'

  IAMRoleS3:
    Type: AWS::IAM::Role
    Properties:
      RoleName: lambda-role
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Action: sts:AssumeRole
          Principal:
            Service:
            - lambda.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: s3-for-iata-data-pipeline-policy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - 's3:GetObject'
            - 's3:PutObject'
            - 's3:DeleteObject'
            Resource: 'arn:aws:s3:::iata-pipeline-data/*'

  fetch_handler_lambda:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt IAMRoleS3.Arn
      MemorySize: 128
      Timeout: 300
      Architectures:
      - x86_64
      EphemeralStorage:
        Size: 1024
      # I have temporary storage disk needs here with the temporary file
      FunctionName: fetch_handler
      Runtime: python3.11
      Handler: lambda_function.lambda_handler
      Code:
        S3Bucket: iata-pipeline-lambda-code
        S3Key: fetch_handler.zip
        # Suppose I manually upload the .zip file to the dedicated S3 bucket â€” I could also automate this step using a shell script in the git repo, for example."

  LambdaInvokePermissionFromS3:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref process_handler_lambda
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt IataDataBucket.Arn

  process_handler_lambda:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt IAMRoleS3.Arn
      MemorySize: 512
      Timeout: 300
      Architectures:
      - x86_64
      EphemeralStorage:
        Size: 512
      FunctionName: process_handler
      Runtime: python3.11
      Handler: lambda_function.lambda_handler
      Code:
        S3Bucket: iata-pipeline-lambda-code
        S3Key: process_handler.zip
        # Suppose I manually upload the .zip file to the dedicated S3 bucket. I can also automate this step using a shell script in the git repo, for example."
